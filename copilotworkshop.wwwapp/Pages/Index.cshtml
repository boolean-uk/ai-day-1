@page
@model IndexModel
@{
    ViewData["Title"] = "Car List";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Car List</title>
    <style>
        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            border: 1px solid black;
            padding: 8px;
            text-align: left;
        }

        th {
            background-color: pink;
        }

        tr:nth-child(even) {
            background-color: orange;
        }

        tr:nth-child(odd) {
            background-color: pink;
        }

        form {
            margin-top: 20px;
            background-color: pink;
            padding: 20px;
            border: 2px solid orange;
            border-radius: 10px;
        }

        label {
            display: block;
            margin-top: 10px;
            color: orange;
        }

        input {
            width: 100%;
            padding: 8px;
            margin-top: 5px;
            border: 1px solid orange;
            border-radius: 5px;
        }

        button {
            margin-top: 20px;
            padding: 10px 20px;
            background-color: orange;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

            button:hover {
                background-color: darkorange;
            }

        .delete-button {
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            padding: 5px 10px;
        }

            .delete-button.purple {
                background-color: purple;
            }

                .delete-button.purple:hover {
                    background-color: darkorange;
                }

        h1, h2 {
            color: orange;
        }
    </style>
</head>
<body>
    <h1>Car List</h1>
    <table id="carTable">
        <thead>
            <tr>
                <th>ID</th>
                <th>Make</th>
                <th>Model</th>
                <th>Year</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <!-- Data will be inserted here -->
        </tbody>
    </table>

    <h2>Add New Car</h2>
    <form id="addCarForm">
        <label for="newCarMake">Make:</label>
        <input type="text" id="newCarMake" name="newCarMake" required>

        <label for="newCarModel">Model:</label>
        <input type="text" id="newCarModel" name="newCarModel" required>

        <label for="newCarYear">Year:</label>
        <input type="number" id="newCarYear" name="newCarYear" required>

        <button type="submit">Add Car</button>
    </form>

    <h2>Update Car</h2>
    <form id="updateCarForm">
        <label for="carId">Car ID:</label>
        <input type="number" id="carId" name="carId" required>

        <label for="carMake">Make:</label>
        <input type="text" id="carMake" name="carMake" required>

        <label for="carModel">Model:</label>
        <input type="text" id="carModel" name="carModel" required>

        <label for="carYear">Year:</label>
        <input type="number" id="carYear" name="carYear" required>

        <button type="submit">Update Car</button>
    </form>

    <script>
        async function fetchCars() {
            try {
                const response = await fetch('https://localhost:7129/cars');
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const cars = await response.json();
                const tableBody = document.getElementById('carTable').getElementsByTagName('tbody')[0];
                tableBody.innerHTML = ''; // Clear existing table rows

                cars.forEach((car, index) => {
                    const row = tableBody.insertRow();
                    row.insertCell(0).textContent = car.id;
                    row.insertCell(1).textContent = car.make;
                    row.insertCell(2).textContent = car.model;
                    row.insertCell(3).textContent = car.year;
                    const actionsCell = row.insertCell(4);
                    const deleteButton = document.createElement('button');
                    deleteButton.textContent = 'Delete';
                    deleteButton.className = 'delete-button purple';
                    deleteButton.onclick = () => deleteCar(car.id);
                    actionsCell.appendChild(deleteButton);
                });
            } catch (error) {
                console.error('There was a problem with the fetch operation:', error);
            }
        }

        async function addCar(event) {
            event.preventDefault();

            const carMake = document.getElementById('newCarMake').value;
            const carModel = document.getElementById('newCarModel').value;
            const carYear = document.getElementById('newCarYear').value;

            const car = {
                make: carMake,
                model: carModel,
                year: parseInt(carYear)
            };

            try {
                const response = await fetch('https://localhost:7129/cars', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(car)
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }

                // Refresh the car list
                fetchCars();
            } catch (error) {
                console.error('There was a problem with the add operation:', error);
            }
        }

        async function updateCar(event) {
            event.preventDefault();

            const carId = document.getElementById('carId').value;
            const carMake = document.getElementById('carMake').value;
            const carModel = document.getElementById('carModel').value;
            const carYear = document.getElementById('carYear').value;

            const car = {
                id: parseInt(carId),
                make: carMake,
                model: carModel,
                year: parseInt(carYear)
            };

            try {
                const response = await fetch(`https://localhost:7129/cars/${carId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(car)
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }

                // Refresh the car list
                fetchCars();
            } catch (error) {
                console.error('There was a problem with the update operation:', error);
            }
        }

        async function deleteCar(carId) {
            try {
                const response = await fetch(`https://localhost:7129/cars/${carId}`, {
                    method: 'DELETE'
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }

                // Refresh the car list
                fetchCars();
            } catch (error) {
                console.error('There was a problem with the delete operation:', error);
            }
        }

        // Fetch cars when the page loads
        window.onload = fetchCars;

        // Add event listeners to the forms
        document.getElementById('addCarForm').addEventListener('submit', addCar);
        document.getElementById('updateCarForm').addEventListener('submit', updateCar);
    </script>
</body>
</html>
